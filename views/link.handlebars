{{#section 'head'}}
	<link rel="stylesheet" href="css/style.css">
	<link rel="stylesheet" href="css/graph.css">
	<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"></script>
{{/section}}

<div class="container">
	<!-- Header -->
	<div class="page-header text-center">
		<h1><span class="fa fa-share-alt-square"></span> Link Analysis</h1>
	</div>

	<div class="row">
		<!-- Left Panel -->
		<div class="col-sm-4">
			<!-- User Panel -->
			<div class="well">
				<h3><span class="fa fa-user"></span> User </h3>
				<p>
					<strong>Name</strong>: {{ user.local.fname }} {{ user.local.lname }}<br>
					<strong>Email</strong>: {{ user.local.email }}
				</p>
				<a href="/logout" class="btn btn-default btn-sm"><span class="fa fa-sign-out"></span> Logout</a>
			</div>
			<!-- Tasks Panel -->
			<div class="well">
				<h3><span class="fa fa-tasks"></span> Tasks</h3>
				<div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">
					<!-- Search Panel -->
					<div class="panel panel-default">
						<!-- Search Panel header -->
						<div class="panel-heading" id="headingSearch" role="tab">
							<h4 class="panel-title inline">
								<div>
									<span class="fa fa-search"></span> <a class="collapsed" href="#collpaseSearch" data-toggle="collapse" data-parent="#accordion" aria-expanded="true" aria-controls="collpaseSearch">
										General Search
									</a>
								</div>
								<div id="reset-view">
									<a href="#" class="btn" role="button" data-toggle="tooltip" title="Reset the data" data-placement="left">
										<span class="fa fa-undo"></span>
									</a>
								</div>							
								
							</h4>
						</div>
						<div id="collpaseSearch" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingSearch">
							<ul class="list-group">
								<!-- Q1 -->
								<li class="list-group-item">
									<h5>Look for a person ...</h5>
									<div class="input-group">
										<input type="text" class="form-control" placeholder="e.g. Rick">
										<!-- <input type="text" class="form-control" placeholder="Name: e.g. Emil" data-provide="typeahead"> -->
										<div class="input-group-btn">
											<button id="btn-search-related" class="btn btn-default" type="button">Go</button>
										</div>
									</div>
								</li>
							</ul>
						</div>
					</div>
					<!-- Query Builder Panel -->
					<div class="panel panel-default">
						<div class="panel-heading" id="headingQuery" role="tab">
							<h4 class="panel-title inline">
								<div>
									<span class="fa fa-sliders"></span> <a href="#collpaseQuery" data-toggle="collapse" data-parent="#accordion" aria-expanded="false" aria-controls="collpaseQuery">
										Query Builder
									</a>
								</div>	
							</h4>
						</div>
						<div id="collpaseQuery" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingQuery">
							<!-- Query Builder -->
							<li class="list-group-item">
								<form role="form" id="query-builder">
									<div class="form-group">
										<label for="sel-type">What type of Node?</label>
										<select name="label" class="form-control input-sm" id="sel-type"></select>
										<label for="sel-relationships">What types of Relationship?</label>
										<select multiple name="relationships" class="form-control input-sm" id="sel-relationships"></select>
										<label for="sel-depth">Depth of Relationships</label>
										<select name="depth" class="form-control input-sm" id="sel-depth"></select>
										<p>
											<br>
											<a id="add-filter" href="#"><span class="fa fa-plus" aria-hidden="true"></span> Add a filter</a>
											<a id="run-query" href="#" style="float: right"><span class="fa fa-play" aria-hidden="true"></span> Run</a>
										</p>
									</div>
								</form>
							</li>
						</div>
					</div>	
					<!-- Edit Panel -->
					<div class="panel panel-default">
						<div class="panel-heading" id="headingEdit" role="tab">
							<h4 class="panel-title">
								<span class="fa fa-pencil-square-o"></span> <a href="#collpaseEdit" data-toggle="collapse" data-parent="#accordion" aria-expanded="false" aria-controls="collpaseEdit">
									Edit
								</a>
							</h4>
						</div>
						<div id="collpaseEdit" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingEdit">
							<div class="panel-body"></div>
						</div>
					</div>	
				</div>
			</div>
		</div>
		<!-- Right Panel -->
		<div class="col-sm-8">
			<!-- Visualization Panel -->
			<div class="well" role="tabpanel">

				<ul class="nav nav-tabs" role="tablist">
					<li role="presentation" class="active"><a href="#graph" aria-controls="graph" role="tab" data-toggle="tab">Graph</a></li>
					<li role="presentation"><a href="#table-panel" aria-controls="table" role="tab" data-toggle="tab">Table</a></li>
				</ul>

				<div id="viz-container" class="tab-content">
					<!-- SVG Panel -->
					<div role="tabpanel" class="tab-pane active" id="graph">
						<div id="svg-container"></div>
					</div>
					<!-- Table Panel -->
					<div role="tabpanel" class="tab-pane" id="table-panel"></div>
				</div>
				
			</div>
		</div>
	</div>
</div>

<div id="hover-tooltip">
    <h4 class="dialog-title"></h4>
</div>
<div id="context-menu"></div>

{{#section 'jquery'}}
	<!-- RightClick Context Menu -->
	<link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/themes/flick/jquery-ui.css" />
	<script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js"></script>
	<!-- Table View -->
	<script src="lib/jquery.bootgrid.css"></script>
	<script src="lib/jquery.bootgrid.min.js"></script>
	<script src="lib/jquery.bootgrid.fa.js"></script>

	<script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.4/js/bootstrap.min.js"></script>
	<script src="lib/bootstrap3-typeahead.min.js"></script>

	<script src="lib/get-form-data.js"></script>
	<script src="lib/bootstrap-waitingfor.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2/backbone-min.js"></script>
	<script src="models/person.js"></script>
	<script src="collections/people.js"></script>
	<script src="collections/models.js"></script>
	<script src="js/client.prototype.js"></script>
	<script src="js/client.utils.js"></script>
	
	<!-- Visualization Script - Must be placed as embedded script.-->
	<script>
		console.log({{{relationships}}});
		console.log({{{nodes}}});

		loadModelstoUI();

		// Initialize tooltips
		$('[data-toggle="tooltip"]').tooltip({container: 'body'})

		// Load typeahead autocomplete
		// $('#btn-search-related').parent().siblings().typeahead({ source: _.pluck({{{nodes}}},'name') });
		
		// Reset Data
		var links = {{{relationships}}};
		var nodes = {};
		resetData(links, nodes);

		var width = 710,
			height = 600,
			NODE_RADIUS = 5, // default 5
			LINK_DISTANCE = 80; // default 40

		var force,
			svg,
			drag,
			link,
			linkPath,
			textPath,
			circle,
			text,
			path_label;

		loadSvg(nodes, links, false);
		updateTable(_.values(nodes));

		// Search People Controller
		$('#reset-view').on('click', function() {
			loadingHandler();
			var people = new PeopleCollection();

			people.fetch({
				method: 'POST',
				success: function() {
					var data = people.toJSON()[0];
					updatePanel(data);
				},
				error: function(err) {
					console.log("Error--", err);
				}
			})
		});

		$('#btn-search-related').on('click', function() {
			loadingHandler();
			var nameField = $(this).parent().siblings().val().capitalize();
			
			// Create new RelatedCollection.
			var related = new RelatedCollection();

			related.fetch({ 
				method: 'POST',
				data: { name: nameField },
				success: function() {
					var data = related.toJSON()[0];
					updatePanel(data, nameField);
				},
				error: function(err) {
					console.log("Error--", err);
				}
			});
		});
		
		function resetData(links, nodes) {
			// Compute the distinct nodes from the links.
			links.forEach(function(link){
				link.source = nodes[link.source] || (nodes[link.source] = { name: link.source });
				link.target = nodes[link.target] || (nodes[link.target] = { name: link.target });
			})
			
			// Append nodes data
			_.toArray({{{nodes}}}).forEach(function(each) {
				_.each(each, function(val, key) {
					if (nodes[each.id]) nodes[each.id][key] = val;
				})
			})
		}

		function updatePanel(data, keyword) {
			// Reset DOM
			force.stop();
			waitingDialog.hide();
			$('#svg-container').empty();

			// Reset data
			var links = data.relationships;
			var nodes = {};
			resetData(links, nodes);

			// Reload!
			loadSvg(nodes, links, false, keyword);

			// Update Table
			updateTable(_.values(nodes));
		}


		function updateTable(data) {
			var groups = [];
			data.forEach(function(node) {
				groups.push(_.omit(node, ['name','id','index','weight','x','y','px','py','fixed']));

			});
			var tables = _.groupBy(groups, 'labels');
			var tablePanel = $('#table-panel');
			// console.log(tablePanel)
			tablePanel.empty();

			_.each(tables, function(table, label) {
				// console.log(label)
				tablePanel.append($('<section>').attr('id','table-section-' + label.toLowerCase()).attr('class', 'table-section')
					.append($('<h4>').text(label)));
				// Append table for each table group
				$('#table-section-' + label.toLowerCase()).append($('<table>').attr('id','table-' + label.toLowerCase())
					.attr('class', 'table table-condensed table-hover'));

				_.each(_.values(table), function(val, i) {
					// Print out header
					if (i == 0) {
						// console.log(_.keys(val));
						$('#table-' + label.toLowerCase()).append($('<thead>')
							.append($('<tr>').attr('id', 'table-head-' + label.toLowerCase())));
						_.each(_.keys(val), function(name) {
							$('#table-head-' + label.toLowerCase()).append($('<th>')
								.attr('data-column-id', name)
								.text(name))
						});	
						$('#table-' + label.toLowerCase()).append($('<tbody>')
							.attr('id', 'table-body-' + label.toLowerCase()));
					}
					// console.log(_.values(val));

					$('#table-body-' + label.toLowerCase()).append($('<tr>').attr('id', 'table-body-' + label.toLowerCase() + '-' + i));

					_.each(_.values(val), function(name) {
						$('#table-body-' + label.toLowerCase() + '-' + i).append($('<td>')
							.text(name));
					});			
				});
				$('#table-' + label.toLowerCase()).bootgrid({
					templates: {
						search: '',
						header: label
					}
				});
			});
		}

		$(window).on('resize', resizeSvg);

		function resizeSvg() {
			svg.attr('width', $('#viz-container').width());
		}
		
		function loadSvg(_nodes, _links, ifFixed, keyword){
			force = d3.layout.force()
				.nodes(d3.values(_nodes))
				.links(_links)
				.size([width, height])
				.linkDistance(LINK_DISTANCE)
				.charge(-100)
				.gravity(.05)
				.on('tick', tick)
				.start();

			drag = force.drag()
				.on("dragstart", dragstart)
				.on("drag", dragmove)
				.on("dragend", dragend);

			svg = d3.select('#svg-container').append('svg')
				.attr('width', width)
				.attr('height', height);

			// Per-type markers, as they don't inherit styles.
			svg.append('defs').selectAll('marker')
				.data(['default','KNOWS','VICTIMIZED','CHARGED','TALKEDTO','COMMITTED','RECORDED','STOLEN','HAPPENED'])
				.enter().append('marker')
					.attr('id', function(d) { return d; })
					.attr('viewBox', '0 -5 10 10') 
					.attr('refX', -7)
					.attr('refY', 0)
					.attr('markerWidth', 7)
					.attr('markerHeight', 7)
					.attr('orient', 'auto')
				.append('path')
					.attr('d', 'M13,-5L0,0L13,5');

			var link = svg.append('g').selectAll('g.link')
				.data(force.links())
				.enter().append('g')
					.attr('class', 'link')
					.on('mouseover', function() {
						d3.select(this.getElementsByClassName('textpath')[0])
							.style('stroke','rgba(0, 153, 255, 0.2)');
					})
					.on('mouseout', function() {
						d3.select(this.getElementsByClassName('textpath')[0])
							.style('stroke','rgba(0,0,0,0.01)');
					})

			linkPath = link.append('path')
				.attr('class', function(d) { return 'link ' + d.type; })
				.attr('marker-start', function(d) { return 'url(#' + d.type + ')'; });

			textPath = link.append('path')
				.attr('id', function(d) { return d.source.index + '_' + d.target.index; })
				.attr('class', 'textpath')

			var path_label = svg.append('g').selectAll('.path_label')
					.data(force.links())
				.enter().append('text')
					.attr('class','path_label');

			path_label.append('textPath')
				.attr('id', function(d) { return 'path_label-' + d.source.id + '-' + d.target.id; })
				.attr('startOffset', '50%')
				.attr('text-anchor', 'middle')
				.attr('xlink:href', function(d) { return '#' + d.source.index + '_' + d.target.index; })
				.style('fill', getRelationshipColor)
				.style('font-family', 'sans-serif')
				.text(function(d) { return d.type; });

			circle = svg.append('g').selectAll('g.circle')
				.data(force.nodes())
				.enter().append('g')
					.attr('class', 'circle')
					.call(drag)
					.on('mouseover', function(d) {
						d3.select(this.getElementsByClassName('circle-background')[0])
							.attr('r', NODE_RADIUS * 1.7)
							.style('fill', 'rgba(0, 153, 255, 0.2)')
							.style('stroke','rgba(0, 153, 255, 0.2)');
							openTooltipOnFeature(d);
					})
					.on('mouseout', function(d) {
						d3.select(this.getElementsByClassName('circle-background')[0])
							.attr('r', NODE_RADIUS)
							.style('fill', 'rgba(0, 0, 0, 0.01)')
							.style('stroke','rgba(0,0,0,0.01)');
							closeTooltipOnFeature(d);
					})
			// Background Circle
			circle.append('circle')
				.attr('r', NODE_RADIUS)
				.attr('class', 'circle-background')
				.classed('fixed', function(d) { d.fixed = ifFixed; })	
			// Circle
			circle.append('circle')
				.attr('r', NODE_RADIUS)
				.attr('id', function(d, i) { return 'node_' + i; })
				.attr('name', function(d) { return d.name; })
				.attr('class', 'node')
				.style('fill', function(d) {
						return 	highlightQueriedNode(d, keyword, this);
					})
				.classed('fixed', function(d) { d.fixed = ifFixed; })
				

			// circle = svg.append('g').selectAll('circle')
			// 	.data(force.nodes())
			// 	.enter().append('circle')
			// 	.attr('r', NODE_RADIUS)
			// 	.attr('id', function(d, i) { return 'node_' + i; })
			// 	.attr('name', function(d) { return d.name; })
			// 	.attr('class', 'node')
			// 	.classed('fixed', function(d) { d.fixed = ifFixed; })
			// 	.call(drag)
				// .on('mouseover', openTooltipOnFeature)
				// .on('mouseout', closeTooltipOnFeature)
				// 	.append('image')
				// 	.attr("xlink:href", function(d) {
				// 		var nodeData = (typeof(localStorage.savedNode_data) === 'undefined') ? node_data : JSON.parse(localStorage.savedNode_data);
				// 		return nodeData[0][d.name].photo;
				// 	})
				// 	.attr('x', '-8px')
				// 	.attr('y', '-8px')
				// 	.attr('width', '16px')
				// 	.attr('height', '16px');

			text = svg.append('g').selectAll('g')
				.data(force.nodes())
				.enter().append('g');

			text.append('text')
				.attr('id', function(d) { return 'text-' + d.id; })
				.attr('x', 8)
				.attr('y', '.31em')
				.attr('class', 'shadow')
				.text(function(d) { return d.labels; });

			var SVGRect = function(d) { return d3.select('#text-' + d.id).node().getBBox(); };
			
			text.insert('rect','text')
				.attr('x', function(d) { return SVGRect(d).x; })
				.attr('y', function(d) { return SVGRect(d).y; })
				.attr('width', function(d) { return SVGRect(d).width; })
				.attr('height', function(d) { return SVGRect(d).height; })
				.style('fill','rgb(245, 245, 245)');

			
		}

		function getRelationshipColor(d) {
			// ['default','KNOWS','VICTIMIZED','CHARGED','TALKEDTO','COMMITTED','RECORDED','STOLEN','HAPPENED']
			var color;
			switch(d.type) {
				
				case 'KNOWS':
					color = 'rgba(255, 0, 255, 1.0)';
					break;
				case 'VICTIMIZED':
					color = 'rgba(255, 75, 68, 1.0)';
					break;
				case 'CHARGED':
					color = 'rgba(0, 204, 153, 1.0)';
					break;
				case 'TALKEDTO':
					color = 'rgba(0, 0, 255, 1.0)';
					break;
				case 'COMMITTED':
					color = 'rgba(163, 71, 71, 1.0)';
					break;
				case 'RECORDED':
					color = 'rgba(0, 153, 0, 1.0)';
					break;
				case 'STOLEN':
					color = 'rgba(153, 153, 102, 1.0)';
					break;
				case 'HAPPENED':
					color = 'rgba(255, 102, 0, 1.0)';
					break;
				default:
					color = '#ccc';
			}
			return color;
		}

		function tick() {
			linkPath.attr('d', function(d) {
				return arcPath(false, d);
			});

			textPath.attr('d', function(d) {
				return arcPath(d.source.x < d.target.x, d);
			});

			circle.attr('transform', function(d) {
				return 'translate(' + d.x + ',' + d.y + ')';
			});

			text.attr('transform', function(d) {
				return 'translate(' + d.x + ',' + d.y + ')';
			});
		}
		
		function arcPath(leftHand, d) {
			var start = leftHand ? d.source : d.target,
				end = leftHand ? d.target : d.source,
				dx = end.x - start.x,
				dy = end.y - start.y,
				dr = (d.bidirectional) ? Math.sqrt(dx * dx + dy * dy) : 0,
				sweep = leftHand ? 0 : 1;
			return "M" + start.x + "," + start.y + "A" + dr + "," + dr + " 0 0," + sweep + " " + end.x + "," + end.y;
		}


		function dragstart(d) {
			var thisTarget = this;
			// Initiate on left mouse button only
			if (d3.event.sourceEvent.which == 1) {
  				dragInitiated = true;   
  				force.stop();         
			} else if (d3.event.sourceEvent.which == 3) {
				// Context menu
				makeForceContextMenu(d, thisTarget);
			}
		}

		function dragmove(d) {
			if (dragInitiated) {
				// force.stop();
				d.px += d3.event.dx;
				d.py += d3.event.dy;
				d.x += d3.event.dx;
				d.y += d3.event.dy;
				tick()
			}
		}

		function dragend(d) {
			// Only take gestures into account that
			if (d3.event.sourceEvent.which == 1) {
				// $('#svg-container').empty();
				// reloadSvg(JSON.parse(localStorage.savedNodes), JSON.parse(localStorage.savedLinks), true)
				d3.select(this).classed('fixed', d.fixed = true);
				force.resume();
				// Terminate drag gesture
				dragInitiated = false;
			}
		}

		function dblclick(d, thisTarget) {
			// d3.select(thisTarget).style('fill','rgba(88, 155, 208, 1.0)').style('stroke','rgba(255,255,255,1)');
			d3.select(thisTarget).classed('fixed', d.fixed = false);
		}

		function makeForceContextMenu(d, thisTarget) {
			// Supress default contextmenu
			d3.select(this).node().oncontextmenu = function(){ return false; };

			// Close tooltip
			closeTooltipOnFeature(d);

			$('#menu').menu('destroy');
			$('#context-menu').empty();
			$('#context-menu').append($('<ul>').attr('id','menu')
				// .append($('<li>').attr('id','break-link-item').text('Break Link'))
				.append($('<li>').attr('id','unpin-node-item').text('Unpin Node'))
				// .append($('<li>').attr('id','show-photo-item')
				// 	.append($('<label>').text('Show Photo'))
				// 	.append($('<input>').attr('type','checkbox').attr('id','showPhotoSwitch')
				// 		.attr('checked', (d.hasOwnProperty('photoIsOn')?d.photoIsOn:false)))
				// 	)
				)
			$('#menu').menu({
				select: function(event, ui) {
					switch (ui.item.attr('id')) {
						// case 'break-link-item':
						// 	console.log('Break Link Selected');
						// 	removeLink(d);
						// 	update();
						// 	break;
						case 'unpin-node-item':
							console.log('Unpin Selected');
							dblclick(d, thisTarget);
							break;
						// case 'show-photo-item':
						// 	console.log('Show Photo Selected');
						// 	togglePhoto(thisTarget, d)
					}
				}
			});

			var svgPosition = cumulativeOffset($('#svg-container')[0]);
			$('#context-menu').css('top', svgPosition.top + d.y - $('#context-menu').height())
				.css('left', svgPosition.left + d.x);

			// Destroy Context Menu.
			$(document).on('click', destroyContextMenu);
		}
		function destroyContextMenu() {
			d3.select(window).node().oncontextmenu = function(){ return true; };
			$('#menu').menu('destroy');
			$('#context-menu').empty();
			// $(document).off('click');


		}
		function cumulativeOffset(element) {
			var top = 0, left = 0;
			do {
				top += element.offsetTop  || 0;
				left += element.offsetLeft || 0;
				element = element.offsetParent;
			} while(element);

			return {
				top: top,
				left: left
			};
		};
	</script>
{{/section}}


